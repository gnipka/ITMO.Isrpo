/*
 * Расписание тренировок
 *
 * This is a sample Workout Schedule Service based on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 0.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Workout.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;
using Workout.Attributes;

namespace Workout.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WorkoutControllerApiController : ControllerBase
    {
        private readonly ILogger<WorkoutControllerApiController> _logger;

        public WorkoutControllerApiController(ILogger<WorkoutControllerApiController> logger)
        {
            _logger = logger;
        }
        public static IEnumerable<Models.Workout> Workouts { get; set; } = new List<Models.Workout>();
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add new workout</remarks>
        /// <param name="body"></param>
        /// <response code="200">Successful operation</response>
        [HttpPost]
        [Route("/workout")]
        [ValidateModelState]
        [SwaggerOperation("WorkoutPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Models.Workout), description: "Successful operation")]
        public virtual IActionResult WorkoutPost([FromBody]Models.Workout body)
        {
            Workouts = Workouts.Append(body);
            _logger.LogInformation($"Тренировка {body.Id} добавлена в базу данных");
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update an existing workout by Id</remarks>
        /// <param name="body">Update an existing workout</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Workout not found</response>
        [HttpPut]
        [Route("/workout")]
        [ValidateModelState]
        [SwaggerOperation("WorkoutPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Models.Workout), description: "Successful operation")]
        public virtual IActionResult WorkoutPut([FromBody]Models.Workout body)
        {
            var workout = Workouts.FirstOrDefault(x => x.Id == body.Id);

            if (workout == null)
            {
                return NotFound();
            }

            workout.Name = body.Name;
            workout.Date = body.Date;
            workout.During = body.During;
            workout.Coach = body.Coach;
            _logger.LogInformation($"Обновлена информация о тренировке {body.Id}");
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete workout by Id</remarks>
        /// <param name="workoutId"></param>
        /// <response code="200">Workout is deleted</response>
        /// <response code="404">Workout not found</response>
        /// <response code="500">Error</response>
        [HttpDelete]
        [Route("/workout/{workoutId}")]
        [ValidateModelState]
        [SwaggerOperation("WorkoutWorkoutIdDelete")]
        public virtual IActionResult WorkoutWorkoutIdDelete([FromRoute][Required]int? workoutId)
        { 
            var workout = Workouts.FirstOrDefault(x => x.Id == workoutId);

            if (workout == null)
            {
                return NotFound();
            }

            Workouts = Workouts.Where(x => x.Id != workoutId).ToList();
            _logger.LogInformation($"Тренировка {workoutId} удалена из базы данных");
            
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get workout by Id</remarks>
        /// <param name="workoutId"></param>
        /// <response code="200">Workout</response>
        /// <response code="404">Workout not found</response>
        [HttpGet]
        [Route("/workout/{workoutId}")]
        [ValidateModelState]
        [SwaggerOperation("WorkoutWorkoutIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Models.Workout), description: "Workout")]
        public virtual IActionResult WorkoutWorkoutIdGet([FromRoute][Required]int? workoutId)
        { 
            var workout = Workouts.FirstOrDefault(x => x.Id == workoutId);

            if (workout == null)
            {
                return NotFound();
            }
            _logger.LogInformation($"Получена информация о тренировке {workoutId}");
            return Ok(workout);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get workouts by coach</remarks>
        /// <param name="coach"></param>
        /// <response code="200">List of workouts</response>
        [HttpGet]
        [Route("/workouts/{coach}")]
        [ValidateModelState]
        [SwaggerOperation("WorkoutsCoachGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Models.Workout>), description: "List of workouts")]
        public virtual IActionResult WorkoutsCoachGet([FromRoute][Required]string coach)
        {
            var workouts = Workouts.Where(x => x.Coach == coach);
            
            _logger.LogInformation($"Получена информация о тренировках тренера {coach}");
            return Ok(workouts);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get all workouts</remarks>
        /// <response code="200">List of workouts</response>
        [HttpGet]
        [Route("/workouts")]
        [ValidateModelState]
        [SwaggerOperation("WorkoutsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Models.Workout>), description: "List of workouts")]
        public virtual IActionResult WorkoutsGet()
        {
            _logger.LogInformation($"Получена информация о всех тренировках");
            return Ok(Workouts);
        }
    }
}
